import sys
from process import runBenchmark, prepareBenchmark, clear


def help_message(): 
    print("-" * 80)
    print("Usage: main.py [OPTIONS] [SUBOPTIONS]")
    print("")
    print("This script does the following things:")
    print("  - Extracts static information for each wasm library.")
    print("  - Computes PDG for each tool being evaluated, for each wasm library, for each wasm function.")
    print("  - Reinstruments the PDG in normal format.")
    print("  - Compare and analyse the PDG generated by diffirent tools.")
    print("  - Latexifies all the data and reports results on stdout.")
    print("")
    print("Options:")
    print("--help   -h          Print this help message.")
    print("--all-fresh          Run a fresh evaluation for realworld and microbenchmarks.")
    # print("--real               Run evaluation on real world binaries dataset")
    # print("  --fresh            Run a fresh evaluation from the start, re-evaluating static, tools and dynamic information.")
    # print("  --eval-static      Re-run only the static binary evaluation.")
    # print("  --eval-tools       Re-run only the tools evaluation.")
    # print("  --eval-dyn         Re-run only the dynamic evalution using Wasabi.")
    print("--micro              Run evaulation on microbenchmarks, if no suboptions are passed, print help message.")
    print("  --fresh            Run a fresh evaluation from the start, include prerequsite file generate, PDG generate and transform, compare and analyse result store.")
    print("  --eval-no-prepare  Re-use the existing prerequsite file, only run PDG generate and transform, compare and analyse result store.")
    print("  --dump             Print the result generated last time.")
    print("--clear              Clear all the data generated by the script.")
    print("")
    print("If you do not pass in any options, there is nothing to do.")

def main():
    args = sys.argv[1:]
    if len(args)==0 or args[0] == "-h" or args[0] == "--help": 
        help_message()
        sys.exit()
    if args[0] == "--micro":
        if len(args) == 1:
            print("Please pass in suboptions for --micro.")
            help_message()
            sys.exit()
        if args[1] == "--fresh":
            prepareBenchmark()
            runBenchmark()
        elif args[1] == "--eval-no-prepare":
            runBenchmark()
        elif args[1] == "--dump":
            print("Not implemented yet.")
            pass
        else:
            print("Invalid suboption {} for --micro.".format(args[1]))
            help_message()
            sys.exit()
    elif args[0] == "--all-fresh":
        print("Not implemented yet.")
        pass
    elif args[0] == "--clear":
        clear()
    else:
        print("Invalid option {}.".format(args[0]))
        help_message()
        sys.exit()

if __name__ == "__main__":
    main()
